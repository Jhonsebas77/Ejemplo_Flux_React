{
  "_args": [
    [
      {
        "raw": "reflux@^6.4.1",
        "scope": null,
        "escapedName": "reflux",
        "name": "reflux",
        "rawSpec": "^6.4.1",
        "spec": ">=6.4.1 <7.0.0",
        "type": "range"
      },
      "/Volumes/ARCHIVOS/Dropbox/Fruticola de Colombia/Desarrollos/ReactNative/Proyectos/Ejemplo_Flux_React"
    ]
  ],
  "_from": "reflux@>=6.4.1 <7.0.0",
  "_id": "reflux@6.4.1",
  "_inCache": true,
  "_location": "/reflux",
  "_nodeVersion": "6.5.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/reflux-6.4.1.tgz_1488257862461_0.2077288639266044"
  },
  "_npmUser": {
    "name": "bryangrezeszak",
    "email": "bryangrezeszak@mail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "reflux@^6.4.1",
    "scope": null,
    "escapedName": "reflux",
    "name": "reflux",
    "rawSpec": "^6.4.1",
    "spec": ">=6.4.1 <7.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/reflux/-/reflux-6.4.1.tgz",
  "_shasum": "8bbbabaff54cf1b82233d67dd2542fdad2a8d678",
  "_shrinkwrap": null,
  "_spec": "reflux@^6.4.1",
  "_where": "/Volumes/ARCHIVOS/Dropbox/Fruticola de Colombia/Desarrollos/ReactNative/Proyectos/Ejemplo_Flux_React",
  "author": {
    "name": "Mikael Brassman"
  },
  "bugs": {
    "url": "https://github.com/reflux/refluxjs/issues"
  },
  "dependencies": {
    "eventemitter3": "^1.1.1",
    "reflux-core": "^1.0.0"
  },
  "description": "A simple library for uni-directional dataflow application architecture inspired by ReactJS Flux",
  "devDependencies": {
    "benchmark": "^1.0.0",
    "browserify": "~10.2.3",
    "chai": "latest",
    "chai-as-promised": "latest",
    "es6-promise": "^2.3.0",
    "grunt": "^0.4.5",
    "grunt-browserify": "3.8.0",
    "grunt-cli": "^0.1.13",
    "grunt-contrib-jshint": "^0.11.2",
    "grunt-contrib-uglify": "^0.5.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-karma": "latest",
    "grunt-mocha-test": "~0.12.7",
    "karma": "latest",
    "karma-browserify": "latest",
    "karma-commonjs": "latest",
    "karma-mocha": "latest",
    "karma-phantomjs-launcher": "latest",
    "karma-sauce-launcher": "latest",
    "karma-spec-reporter": "latest",
    "matchdep": "^0.3.0",
    "mocha": "latest",
    "q": "^1.0.1",
    "react-dom": "^15.0.2",
    "sinon": "^1.10.3"
  },
  "directories": {},
  "dist": {
    "shasum": "8bbbabaff54cf1b82233d67dd2542fdad2a8d678",
    "tarball": "https://registry.npmjs.org/reflux/-/reflux-6.4.1.tgz"
  },
  "gitHead": "8f40fb8cf45c133af855459d9e425cb744ad77da",
  "homepage": "https://github.com/reflux/refluxjs#readme",
  "keywords": [
    "reflux",
    "react",
    "flux",
    "architecture",
    "dataflow",
    "action",
    "event",
    "data"
  ],
  "license": "BSD-3-Clause",
  "main": "src/index.js",
  "maintainers": [
    {
      "name": "bryangrezeszak",
      "email": "bryangrezeszak@mail.com"
    },
    {
      "name": "devinivy",
      "email": "devin@bigroomstudios.com"
    },
    {
      "name": "spoike",
      "email": "mishakun+npm@gmail.com"
    }
  ],
  "name": "reflux",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^15.0.2"
  },
  "readme": "\r\n# RefluxJS\r\n\r\nA simple library for unidirectional dataflow architecture inspired by ReactJS [Flux](http://facebook.github.io/react/blog/2014/05/06/flux.html).\r\n\r\n[![NPM Version][npm-image]][npm-url]\r\n[![Bower Version][bower-image]][bower-url]\r\n[![Build Status][travis-image]][travis-url]\r\n[![NPM Downloads][downloads-image]][npm-url]\r\n\r\n[![Sauce Test Status](https://saucelabs.com/browser-matrix/refluxjs.svg)](https://saucelabs.com/u/refluxjs)\r\n\r\n--------------------\r\n\r\n## Installation\r\n\r\nYou can currently install the package as a npm package, a bower component, or import it from a CDN.\r\n\r\n#### NPM\r\n\r\nThe following command installs RefluxJS as a npm package:\r\n\r\n    npm install reflux\r\n\r\nThen, in your script, you can gain a reference to RefluxJS like so: `var Reflux = require('reflux');`\r\n\r\n#### Bower\r\n\r\nThe following command installs reflux as a bower component that can be used in the browser:\r\n\r\n    bower install reflux\r\n\r\nThen the files may be imported into your html file via `bower_components/reflux/dist/reflux.js` or `bower_components/reflux/dist/reflux.min.js`. At that point a `Reflux` variable will be globally available to you. It is suggested that you import RefluxJS after React.\r\n\r\n#### CDN\r\n\r\nRefluxJS is available at [jsdelivr](http://www.jsdelivr.com/#!refluxjs).\r\n\r\nYou may import the CDN files directly through a script tag. At that point a `Reflux` variable will be globally available to you. It is suggested that you import RefluxJS after React.\r\n\r\n--------------------------------\r\n\r\n## Overview\r\n\r\nThe main function of Reflux is to introduce a more functional programming style architecture by eschewing MVC like pattern and adopting a single data flow pattern.\r\n\r\n```\r\n+---------+       +--------+       +-----------------+\r\n¦ Actions ¦------>¦ Stores ¦------>¦ View Components ¦\r\n+---------+       +--------+       +-----------------+\r\n     ^                                      ¦\r\n     +--------------------------------------+\r\n\r\n```\r\n\r\nThe pattern is composed of actions and data stores, where actions initiate new data to pass through data stores before coming back to the view components again. If a view component has an event that needs to make a change in the application's data stores, they need to do so by signaling to the stores through the actions available.\r\n\r\n--------------------------------\r\n\r\n## Usage\r\n\r\nFor usage, you need to create actions which can be called from React components. Those actions are listened to by stores which hold and update data. In turn those stores are hooked up to React components and set state within them as it is updated within the store.\r\n\r\nTherefore the 3 main concepts to know are:\r\n\r\n1. [creating actions](#creating-actions)\r\n2. [creating stores](#creating-stores)\r\n3. [hooking stores to React components](#hooking-stores-to-components)\r\n\r\n--------------------------------\r\n\r\n## Creating Actions\r\n\r\nCreate an action by calling `Reflux.createAction` with an optional options object.\r\n\r\n```javascript\r\nvar statusUpdate = Reflux.createAction();\r\n```\r\n\r\nAn action is a [function object](http://en.wikipedia.org/wiki/Function_object) that can be invoked like any other function.\r\n\r\n```javascript\r\nstatusUpdate(data); // Invokes the action statusUpdate\r\n```\r\n\r\nThere is also a convenience function for creating multiple actions.\r\n\r\n```javascript\r\nvar Actions = Reflux.createActions([\r\n    \"statusUpdate\",\r\n    \"statusEdited\",\r\n    \"statusAdded\"\r\n]);\r\n\r\n// Actions object now contains the actions\r\n// with the names given in the array above\r\n// that may be invoked as usual\r\n\r\nActions.statusUpdate();\r\n```\r\n\r\n#### More on Actions:\r\nActions can also:\r\n- load files asynchronously with child actions\r\n- do preEmit and shouldEmit checking\r\n- have many shortcuts for easy usage\r\n\r\nSee [Reflux Action Documentation](docs/actions/) for more.\r\n\r\n------------------\r\n\r\n## Creating Stores\r\n\r\nCreate a data store much like ReactJS's own `React.Component` by creating a class extending `Reflux.Store`. The store has a `state` property much like a component, and uses `setState` like a component as well. You may set up all action listeners in the `constructor` and register them by calling the store's own `listenTo` function.\r\n\r\n```javascript\r\nclass StatusStore extends Reflux.Store\r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.state = {flag:'OFFLINE'}; // <- set store's default state much like in React\r\n        this.listenTo(statusUpdate, this.onStatusUpdate); // listen to the statusUpdate action\r\n    }\r\n\r\n    onStatusUpdate(status)\r\n    {\r\n        var newFlag = status ? 'ONLINE' : 'OFFLINE';\r\n        this.setState({flag:newFlag});\r\n    }\r\n}\r\n```\r\n\r\nIn the above example, whenever the action `statusUpdate` is called, the store's `onStatusUpdate` callback will be called with whatever parameters were sent in the action. E.g. if the action is called as `statusUpdate(true)` then the `status` argument in the `onStatusUpdate` function is `true`.\r\n\r\nStores also integrate easily with sets of actions via things like `this.listenables`. When an actions object (or an Array of multiple actions objects) is applied to `this.listenables` you may automatically add listeners simply by naming convention. Just name the functions either after the action name (such as `actionName`, or the camelcased action name preceded with \"on\", (such as `onActionName`).\r\n\r\n```javascript\r\nvar Actions = Reflux.createActions(['firstAction', 'secondAction']);\r\n\r\nclass StatusStore extends Reflux.Store\r\n{\r\n    constructor()\r\n    {\r\n        super();\r\n        this.listenables = Actions;\r\n    }\r\n\r\n    onFirstAction()\r\n    {\r\n        // calls on Actions.firstAction();\r\n    }\r\n\r\n\tonSecondAction()\r\n\t{\r\n\t\t// calls on Actions.secondAction();\r\n\t}\r\n}\r\n```\r\n\r\n#### More on Stores:\r\n\r\nReflux stores are very powerful. They can even do things like contribute to a global state that can be read and set for partial or full-state time-travel, debugging, etc.\r\n\r\nSee [Reflux Store Documentation](docs/stores/) to learn more about stores.\r\n\r\n--------------------------\r\n\r\n## Hooking Stores to Components\r\n\r\nOnce you've created actions and stores, now the last step in working RefluxJS is to hook those stores to a React component.\r\n\r\nThis is done as simply as extending `Reflux.Component` instead of `React.Component` and setting the store(s) to use. `Reflux.Component` itself extends `React.Component`, so you use them the exact same. The only difference is that `Reflux.Component` allows you to set stores for the component to get state from:\r\n\r\n```javascript\r\nclass MyComponent extends Reflux.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {}; // our store will add its own state to the component's\r\n        this.store = StatusStore; // <- just assign the store class itself\r\n    }\r\n\r\n    render()\r\n    {\r\n        var flag = this.state.flag; // <- flag is mixed in from the StatusStore\r\n        return <div>User is {flag}</div>\r\n    }\r\n}\r\n```\r\n\r\nWhen the component mounts it will either create a singleton instance of `StatusStore` (if one isn't already made) or use an already made singleton (if it was already created by another component that uses the store).\r\n\r\nOf important note is that you can:\r\n\r\n1. Set multiple stores by setting `this.stores` (the plural) and setting it to an Array of store classes.\r\n2. Set a `this.storeKeys` Array to restrict only certain parts of the store being mixed into the component state.\r\n\r\nThere is also a `mapStoreToState` method in the documentation for those that want absolute control over how a store's state is mapped to a component.\r\n\r\n```javascript\r\nclass MyComponent extends Reflux.Component\r\n{\r\n    constructor(props)\r\n    {\r\n        super(props);\r\n        this.state = {type:'admin'}; // <- note that we can still use normal state\r\n        this.stores = [StatusStore, AnotherStore];\r\n        this.storeKeys = ['flag', 'info'];\r\n    }\r\n\r\n    render()\r\n    {\r\n        var flag = this.state.flag;\r\n        var info = this.state.info;\r\n        var type = this.state.type;\r\n        return <div>User is {flag}, info: {info}, type: {type}</div>\r\n    }\r\n}\r\n```\r\n\r\nThe above will mix in properties from the state of both `StatusStore` and `AnotherStore`. However, because of `this.storeKeys` it will only mix in the properties `flag` and `info` from them. So any other properties within those stores will not get mixed in. So even if a store contained a `type` property in its state it would not get mixed in, and the `type` value we set as a normal part of the component state is safe.\r\n\r\n#### More on using Reflux style components:\r\n\r\nReflux's simple and intuitive way of integrating stores into components is easy and powerful. You can aggregate stores together on a component-by-component basis, filter which parts of the stores come through and which don't, or even do a detailed manual mapping of exactly how you want the state from stores to map to the state in a particular component.\r\n\r\nSee [Reflux Style Component Documentation](docs/components/) to learn more.\r\n\r\n-----------------------------------------\r\n\r\n## Documentation\r\n\r\nWhat you've just read is a \"view from 10,000 feet\" type overview of getting started with RefluxJS. For serious learning see the [documentation](docs/).\r\n\r\n[npm-image]: http://img.shields.io/npm/v/reflux.svg\r\n[downloads-image]: http://img.shields.io/npm/dm/reflux.svg\r\n[dependencies-image]: http://img.shields.io/david/reflux/refluxjs.svg\r\n[npm-url]: https://www.npmjs.org/package/reflux\r\n[bower-image]: http://img.shields.io/bower/v/reflux.svg\r\n[bower-url]: http://bower.io/search/?q=reflux\r\n[travis-image]: http://img.shields.io/travis/reflux/refluxjs/master.svg\r\n[travis-url]: https://travis-ci.org/reflux/refluxjs\r\n[gratipay-image]: http://img.shields.io/gratipay/spoike.svg\r\n[gratipay-url]: https://gratipay.com/spoike/\r\n[thinkful-image]: https://tf-assets-staging.s3.amazonaws.com/badges/thinkful_repo_badge.svg\r\n[thinkful-url]: http://start.thinkful.com/react/?utm_source=github&utm_medium=badge&utm_campaign=reflux\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/reflux/refluxjs.git"
  },
  "scripts": {
    "benchmark": "node test/benchmarks",
    "build": "grunt build",
    "test": "grunt test",
    "test:sauce": "grunt karma:sauce"
  },
  "version": "6.4.1"
}
